{
  "title": "Neonexus36.0 - Meal QR Pass Management System",
  "subtitle": "BITM IEEE STUDENT BRANCH",
  "description": "A streamlined Flask web application for managing one-time meal QR passes during the Neonexus36.0 hackathon — a 36-hour coding event. The system enables the admin to create meal sessions, generate scannable QR codes, send them individually via email to participants, and track real-time redemption statistics through a simple two-page interface: Admin Dashboard and QR Scanner.",
  "core_features": {
    "admin_dashboard": [
      "Session Creation: Add meal sessions by entering only the session name.",
      "QR Code Generation: Automatically generate scannable QR codes for each created session.",
      "Email Sending: Send QR codes to participants via Gmail SMTP (teamneonexus@gmail.com) by entering a single email address at a time (no bulk sending).",
      "Session Selection: Dropdown with 'Select All' and 'Deselect All' options for quick QR sending.",
      "Statistics Overview: Displays Total QR Codes, Redeemed, and Remaining.",
      "Delete Button: Deletes all statistics and all created sessions from the UI and database."
    ],
    "qr_scanner": [
      "Session Selection: Dropdown to choose the created session before scanning.",
      "QR Validation: Only scans QR codes belonging to the chosen session.",
      "Scan Results Section: Shows whether the QR is valid/redeemed.",
      "Recent Redemptions: Displays the latest successful scans.",
      "Scan Next Button: Allows scanning the next QR without refreshing."
    ],
    "audio_feedback": [
      "Success Sound: Pleasant ascending tone for valid redemptions.",
      "Failure Sound: Descending tone for invalid or already redeemed codes."
    ]
  },
  "database_architecture": {
    "type": "PostgreSQL",
    "design": "Single table storing QR data, usage status, timestamps, and associated participant email.",
    "id_format": "Session-prefixed UUIDs (e.g., BREAKFAST1-a3abd943).",
    "usage_enforcement": "Prevents duplicate redemptions with timestamp logging."
  },
  "email_system": {
    "integration": "Gmail SMTP with app password authentication.",
    "sending_mode": "One recipient per send operation.",
    "template": "Branded event-themed email with usage instructions.",
    "attachments": "Each QR code sent as a PNG file."
  },
  "technical_stack": {
    "backend": ["Flask", "SQLAlchemy ORM"],
    "database": "PostgreSQL",
    "email": ["Flask-Mail", "Gmail SMTP"],
    "qr_generation": "Python qrcode library with JSON payloads",
    "frontend": ["HTML5-QRCode", "Bootstrap", "Vanilla JavaScript", "Font Awesome"]
  },
  "security_validation": {
    "keyword_check": "Embed 'NEON36' in QR payloads.",
    "session_match": "Validate QR against the selected session before redemption.",
    "one_time_use": "Database-level enforcement to prevent reuse.",
    "https_ready": true
  },
  "deployment_configuration": {
    "server": "Gunicorn WSGI",
    "environment_variables": true,
    "auto_cleanup": "Removes temporary QR image files after sending.",
    "error_logging": "Captures email and scanning errors."
  },
  "usage_workflow": [
    "Admin creates sessions.",
    "Admin selects a session (or all), enters a participant’s email, and sends QR codes.",
    "Participant receives QR codes via email.",
    "Scanner operator selects a session on the QR scanner page.",
    "QR is scanned → validated → audio feedback plays.",
    "Stats update automatically.",
    "Admin clicks Delete button → deletes all stats and all created sessions."
  ]
}
